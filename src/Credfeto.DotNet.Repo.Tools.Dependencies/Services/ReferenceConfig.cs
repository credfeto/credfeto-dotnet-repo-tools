using System;
using System.Collections.Generic;
using System.Linq;

namespace Credfeto.DotNet.Repo.Tools.Dependencies.Services;

internal sealed class ReferenceConfig
{
    private readonly IReadOnlyList<string> _doNotRemovePackages;
    private readonly IReadOnlyList<string> _ignoreProjects;

    public ReferenceConfig()
    {
        this._doNotRemovePackages =
        [
            "FunFair.Test.Common", "Microsoft.NET.Test.Sdk",
            "NSubstitute", "TeamCity.VSTest.TestAdapter",
            "xunit", "xunit.v3",
            "xunit.v3.extensibility.core", "xunit.runner.visualstudio",
            "xunit.runner.visualstudio.v3", "Secp256k1.Native",
            "Castle.Core", "AutoBogus.NSubstitute",
            "Bogus", "CountryData.Bogus",
            "BenchmarkDotNet", "BenchmarkDotNet.Diagnostics.dotTrace"
        ];

        this._ignoreProjects = ["BenchmarkDotNet.AutoGenerated.csproj"];
    }

    public bool IsDoNotRemovePackage(string packageId, IReadOnlyList<string> allPackageIds)
    {
        if (this._doNotRemovePackages.Contains(value: packageId, comparer: StringComparer.OrdinalIgnoreCase))
        {
            return true;
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "System.IdentityModel.Tokens.Jwt"))
        {
            return allPackageIds.Contains(value: "Microsoft.AspNetCore.Authentication.JwtBearer", comparer: StringComparer.OrdinalIgnoreCase) ||
                   allPackageIds.Contains(value: "Microsoft.IdentityModel.Tokens", comparer: StringComparer.OrdinalIgnoreCase);
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "Microsoft.AspNetCore.Authentication.JwtBearer"))
        {
            return allPackageIds.Contains(value: "Microsoft.IdentityModel.Tokens", comparer: StringComparer.OrdinalIgnoreCase) ||
                   allPackageIds.Contains(value: "Microsoft.AspNetCore.Authentication.JwtBearer", comparer: StringComparer.OrdinalIgnoreCase);
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "Microsoft.IdentityModel.Tokens"))
        {
            return allPackageIds.Contains(value: "System.IdentityModel.Tokens.Jwt", comparer: StringComparer.OrdinalIgnoreCase) ||
                   allPackageIds.Contains(value: "Microsoft.AspNetCore.Authentication.JwtBearer", comparer: StringComparer.OrdinalIgnoreCase);
        }

        if (packageId.StartsWith(value: "LibSassHost.Native.", comparisonType: StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "Serilog"))
        {
            return allPackageIds.Any(id => id.StartsWith(value: "Serilog.", comparisonType: StringComparison.OrdinalIgnoreCase));
        }

        return false;
    }

    public bool IsIgnoreProject(string projectName)
    {
        if (this._ignoreProjects.Contains(value: projectName, comparer: StringComparer.OrdinalIgnoreCase))
        {
            return true;
        }

        if (projectName.EndsWith(value: ".All.csproj", comparisonType: StringComparison.OrdinalIgnoreCase))
        {
            // Skip metaprojects
            return true;
        }

        return false;
    }
}