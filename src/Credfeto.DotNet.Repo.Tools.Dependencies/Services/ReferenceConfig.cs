using System;
using System.Collections.Generic;
using System.Linq;

namespace Credfeto.DotNet.Repo.Tools.Dependencies.Services;

internal sealed class ReferenceConfig
{
    public bool IsDoNotRemovePackage(string packageId, IReadOnlyList<string> allPackageIds)
    {
        if (StringComparer.Ordinal.Equals(x: packageId, y: "FunFair.Test.Common") || StringComparer.Ordinal.Equals(x: packageId, y: "Microsoft.NET.Test.Sdk") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "NSubstitute") || StringComparer.Ordinal.Equals(x: packageId, y: "TeamCity.VSTest.TestAdapter") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "xunit") || StringComparer.Ordinal.Equals(x: packageId, y: "xunit.v3") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "xunit.v3.extensibility.core") || StringComparer.Ordinal.Equals(x: packageId, y: "xunit.runner.visualstudio") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "xunit.runner.visualstudio.v3") || StringComparer.Ordinal.Equals(x: packageId, y: "Secp256k1.Native") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "Castle.Core") || StringComparer.Ordinal.Equals(x: packageId, y: "AutoBogus.NSubstitute") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "Bogus") || StringComparer.Ordinal.Equals(x: packageId, y: "CountryData.Bogus") ||
            StringComparer.Ordinal.Equals(x: packageId, y: "BenchmarkDotNet") || StringComparer.Ordinal.Equals(x: packageId, y: "BenchmarkDotNet.Diagnostics.dotTrace"))
        {
            return true;
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "System.IdentityModel.Tokens.Jwt"))
        {
            return allPackageIds.Contains("Microsoft.AspNetCore.Authentication.JwtBearer") || allPackageIds.Contains("Microsoft.IdentityModel.Tokens");
        }

        if (StringComparer.Ordinal.Equals("Microsoft.AspNetCore.Authentication.JwtBearer"))
        {
            return allPackageIds.Contains("Microsoft.IdentityModel.Tokens") || allPackageIds.Contains("Microsoft.AspNetCore.Authentication.JwtBearer");
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "Microsoft.IdentityModel.Tokens"))
        {
            return allPackageIds.Contains("System.IdentityModel.Tokens.Jwt") || allPackageIds.Contains("Microsoft.AspNetCore.Authentication.JwtBearer");
        }

        if (packageId.StartsWith(value: "LibSassHost.Native.", comparisonType: StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (StringComparer.Ordinal.Equals(x: packageId, y: "Serilog"))
        {
            return allPackageIds.Any(id => id.StartsWith(value: "Serilog.", comparisonType: StringComparison.OrdinalIgnoreCase));
        }

        return false;
    }

    public bool IsIgnoreProject(string projectName)
    {
        string upper = projectName.ToUpperInvariant();

        if (StringComparer.Ordinal.Equals(x: upper, y: "BENCHMARKDOTNET.AUTOGENERATED.CSPROJ"))
        {
            // Skip autogenerated
            return true;
        }

        if (upper.EndsWith(value: ".ALL.CSPROJ", comparisonType: StringComparison.Ordinal))
        {
            // Skip metaprojects
            return true;
        }

        return false;
    }
}